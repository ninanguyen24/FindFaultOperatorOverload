// Author: Nina Nguyen
// Filename: EncryptWord.h
// Date: 11/3/2017 (10/18/2017 version 3) (10/9/2017 version 2) (9/30/2017 version 1)
// Version: 4

/*Description:This program ask the user for a word and generate a random shift key to encrypt the word.
The user can choose to guess what the shift key was or not. Statistics will be generated if they chose to guess.
The user can then choose to decode (return original word), reset (clear the object and stats), encrypt a new word,
or quit the encryption program.

The user can make as many queries as they like to guess what the shift value is. They will enter "-1" to
quit guessing. The program will return a statistics (# of guesses made, high guesses, low guesses, and
the average guess value.

Legal states: On - when a valid word is pass through the shift function after object is initialize.
Cannot change to a different word during the run of Object.
Off - Object is in an off state until shift function is called with valid word passed through.
The field "state" is set to false when the user wants the original word returned by calling decode
or when the object is reset.
Decode will maintain guessing stats but reset will return the object to it's original state.

Legal and illegal input (condition enforced by complier):
Word to encrypt - only a valid word can be passed to constructor and return the correct encryption
according to Shift Key. Program will encrypt with invalid words but can't guarantee expected/correct output.
queryShift() - Only positive integers will be passed through driver program, except -1 is used as
SENTINEL value. QueryShift is not designed to handle illegal inputs. Stat() will print the statistics.
decode() and reset() only called from the driver.

Assumptions: Constructor will initilize all private fields - ints to 0 and string to empty. Fields increase or reset according to
public functions call in the driver.
Class Invariants: the field member "state" keeps track of the state of the object throughout the lifetime of the run.
all field members are initiated to their default values. ints are set to 0, string is empty and bool is false.
It is set to true (on) after shift(string) and false (off) during construction and after decode().
Object can only encrypt one word at a time, may be reset.
Array used to store alphabet is set in size, will not be able to add or remove elements.
State transitions goes from off to on after shift() and on to off after reset() and decode().
reset() can be called anytime, will only reset the state from on to off once no matter the initial state.
reset() should only be called in constructor and toggle after the encryption.
decode() and queryshift(int) can't be called unless state is "on", after the shift(string) is called. Will rely on
isOn() to determine state. Will allow client class to access if isOn() returns "true".
stat() can only be called when numOfGuess is not 0 and state is "off"
getShiftValue() is only used for testing
EncryptWord will overload operator by comparing the length of the words. When adding, the two words will be added
together then will get encrypted.
For p3, EncryptWord is still encapsulated and client should not have access to EncryptWord objects. EncryptWord
operator overload will be called by FindFault class.
*/

#ifndef ENCRYPTWORD_H
#define ENCRYPTWORD_H

#include <iostream>
#include <string>
using namespace std;

class EncryptWord {
public:
	//constructor, initialize private fields by calling reset(). Initial state is off.
	//all int equal and strings are empty after every construction call
	EncryptWord();

	//take a string parameter and shift the word by the shift value
	//pre: state has to be off, will encrypt the passed string. String validity done in client program
	//post: state becomes on after word gets encrypted
	string shift(string);

	//takes an int from client program to guess the shift value generated by the program
	//pre: states has to be on to guess
	//post: none - doesn't change state, update member variables accordingly
	bool queryShift(int);

	//return shift value generated by program. Used for testing purposes
	//pre: none
	//post: none
	int getShiftValue() const;

	//allow user to get the original word. Change the state of the the program to "off"
	//pre: encrypt state to be on to call this function
	//post: return orginal word, change of state to off
	string decode();

	//print out the high guess, low guess, and average value of guesses
	//pre: Can be called during on or off states, or when numOfGuesses is 0. Assuming the state to be off when numOfGuesses is 0.
	//post: no changes to state, prints out stat
	void stat();

	//clear the current object, reset all stats
	//pre: state can be on or off
	//post: legal state becomes off, all fields are reset, becomes initial state when object was created
	void reset();

	//allow user to get the state of the object - return true or false
	//pre: none
	//post: none
	bool isOn();

	//************************************************************************************************************
	//**************** P3 starts below - OPERATOR OVERLOAD *******************************************************
	//************************************************************************************************************

	//description: adds two EncryptWords objects together. It appends the two strings from each object to make one
	//			   long string. Return an EncryptWord object.
	//pre: both EncryptWord objects have to be in an "on" state. Object will only have a string after main pass in
	//     a string causing the state to be "on"
	//post: State remain unchanged, should stay "on"
	EncryptWord operator+ (const EncryptWord &);

	//description: Greater than - Compares the length of two strings within two EncryptWord Objects
	//pre: both EncryptWord objects have to be in an "on" state.
	//post: State remain unchanged, should stay "on"
	bool operator > (const EncryptWord &);

	//description: Less than - Compares the length of two strings within two EncryptWord Objects
	//pre: both EncryptWord objects have to be in an "on" state.
	//post: State remain unchanged, should stay "on"
	bool operator < (const EncryptWord &); 

	//description: comepare to see if two words within EncryptWord objects have the same length
	//pre: both EncryptWord objects have to be in an "on" state
	//post: State remain unchanged, should stay "on"
	bool operator == (const EncryptWord &);

	//description: compare to see if two words within EncryptWord objects have different length
	//pre: both EncryptWord objects have to be in an "on" state
	//post: State remain unchanged, should stay "on"
	bool operator != (const EncryptWord &);


	//EncryptWord operator+= (const EncryptWord &);// Might not do


private:

	string word;
	int shiftValue; //random number between 1-26 generated by the program
	int highGuess; //hold the highest guess value from user
	int lowGuess; //hold the lowest guess value from user
	int numOfGuesses; //count the number of guesses conducted by user
	int averageValue; //total up all the value of guesses to get average guess value
	static const int ALPHABET_INDEX; //number of letters in the alphabet
	static const string ALPHABET; //string of alphabet
	bool state; //keeps track of the current object state

				//make word all lowercase
				//pre: none
				//post: none
	string startEncrypt(string);
};



#endif